# Алгоритм сортировки вставками(O(N**2))
# последний элемент в цикле сравнивается с предыдущим
def insert_s(nums):
    N = len(nums)
    for i in range(1, N):
        for j in range(i, 0, -1):
            if nums[j] < nums[j - 1]:
                nums[j], nums[j - 1] = nums[j - 1], nums[j]
            else:
                break
    return nums
nums = [9, 1, 15, 28, 6]
print(insert_s(nums))

# //////////////////////////////
# Алгоритм сегментирует список на две части: отсортированную и неотсортированную.
# Алгоритм перебирает второй сегмент и вставляет текущий элемент в правильную позицию первого сегмента.
def insertion_sort(nums):
    # Сортировку начинаем со второго элемента, т.к. считается, что первый элемент уже отсортирован
    for i in range(1, len(nums)):
        item_to_insert = nums[i]
        # Сохраняем ссылку на индекс предыдущего элемента
        j = i - 1
        # Элементы отсортированного сегмента перемещаем вперёд,
        # если они больше элемента для вставки
        while j >= 0 and nums[j] > item_to_insert:
            nums[j + 1] = nums[j]
            j -= 1
        # Вставляем элемент
        nums[j + 1] = item_to_insert
# Проверяем, что оно работает
random_list_of_nums = [9, 1, 15, 28, 6]
# print(insertion_sort(random_list_of_nums))

