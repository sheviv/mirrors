// указатели
// & позволяет узнать, какой адрес памяти присвоен определенной переменной.
// #include <iostream>
// int main()
// {
//     int a = 7;
//     std::cout << a << '\n'; // выводим значение переменной a
//     std::cout << &a << '\n'; // выводим адрес памяти переменной a
//     return 0;
// }

///////

// Оператор разыменования *
// #include <iostream>
// int main()
// {
    // int a = 7;
    // std::cout << a << '\n'; // выводим значение переменной a
    // std::cout << &a << '\n'; // выводим адрес переменной a
    // std::cout << *&a << '\n'; /// выводим значение ячейки памяти переменной a
    // return 0;
// }


////////

// int *iPtr; // указатель на значение типа int
// double *dPtr; // указатель на значение типа double

// int iValue = 7;
// double dValue = 9.0;
// int *iPtr = &iValue; // ок
// double *dPtr = &dValue; // ок


/////////


// Разыменование указателей
#include <iostream>
int main()
{
    int value = 5;
    std::cout << &value << std::endl; // выводим адрес value  // 0034FD90
    std::cout << value << std::endl; // выводим содержимое value  // 5
    int *ptr = &value; // ptr указывает на value
    std::cout << ptr << std::endl; // выводим адрес, который хранится в ptr, т.е. &value // 0034FD90
    std::cout << *ptr << std::endl; // разыменовываем ptr (получаем значение на которое указывает ptr) // 5
    return 0;
}

////////


// Нулевые указатели
// int *ptr(0); // ptr теперь нулевой указатель
//
// int *ptr1; // ptr1 не инициализирован
// ptr1 = 0; // ptr1 теперь нулевой указатель


/////////

// Нулевые указатели
int *ptr = nullptr; // примечание: ptr попрежнему остается указателем типа int, просто со значением null (0)


////////

// индексация массивов
int array [5] = { 7, 8, 2, 4, 5 };
std::cout << &array[1] << '\n'; // выведется адрес памяти элемента под индексом 1
std::cout << array+1 << '\n'; // выведется адрес памяти указателя на массив + 1
std::cout << array[1] << '\n'; // выведется 8
std::cout << *(array+1) << '\n'; // выведется 8 (обратите внимание на скобки, они здесь обязательны)
